function net = initializeMitochondria()

f=1/100 ;
net.layers = {} ;
net.classes = {1,2};
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(11,11,1,20, 'single'), ...
                           'biases', zeros(1, 20, 'single'), ...
                           'stride', 3, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [3 3], ...
                           'stride', 2, ...
                           'pad', [0 1 0 1]) ; % Emulate caffe
                       
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(7,7,20,50, 'single'),...
                           'biases', zeros(1,50,'single'), ...
                           'stride', 2 , ...
                           'pad', 0) ;   
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', [0 1 0 1]) ; % Emulate caffe
 net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(5,5,50,100, 'single'),...
                           'biases', zeros(1,100,'single'), ...
                           'stride', 2, ...
                           'pad', 0) ;   
  net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', [0 1 0 1]) ; % Emulate caffe
  net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(2,2,100,100, 'single'),...
                           'biases', zeros(1,100,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;    
 net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(1,1,100,2, 'single'),...
                           'biases', zeros(1,2,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;  

net.layers{end+1} = struct('type', 'softmaxloss') ;
